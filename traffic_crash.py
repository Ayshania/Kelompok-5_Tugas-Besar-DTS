# -*- coding: utf-8 -*-
"""Traffic crash.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ueAsWfkh9X_Q609bwSOgGr31ndBABPC_
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

"""##**1. DATA UNDERSTANDING (Mengumpulkan Data)**"""

#Memanggil dataset
from google.colab import files
uploaded = files.upload()

df = pd.read_csv('Traffic_Crashes_-_Crashes.csv')
df

df.info()

# Menghilangkan kolom yang tidak diperlukan
kecelakaan = df[["POSTED_SPEED_LIMIT", "TRAFFIC_CONTROL_DEVICE", "DEVICE_CONDITION", "BEAT_OF_OCCURRENCE", "INJURIES_TOTAL","INJURIES_REPORTED_NOT_EVIDENT",  "INJURIES_INCAPACITATING", "MOST_SEVERE_INJURY", "CRASH_HOUR"]]

# lalu tampilkan 
kecelakaan

kecelakaan.dropna()

kecelakaan.info()

# melihat jumlah baris dan jumlah kolom (bentuk data) pada data df dengan fungsi .shape 
kecelakaan.shape

#Memanggil data pertama
kecelakaan.head()

#Memanggil informasi statistik data
kecelakaan.describe()

"""##**2. DATA PREPARATION (Menelaah Data)**

**Data Cleaning (Pembersihan Data)**
"""

#Konversi 'POSTED_SPEED_LIMIT'/kecepatan terakhir saat terjadinya kecelakaan Float to Int
kecelakaan["POSTED_SPEED_LIMIT"] = kecelakaan["POSTED_SPEED_LIMIT"].fillna(0)
kecelakaan["POSTED_SPEED_LIMIT"] = kecelakaan["POSTED_SPEED_LIMIT"].astype("int")
kecelakaan

#Menggunakan Regex
regex = r'^(\d{4})'

#Cek tabel POSTED_SPEED_LIMIT
kecelakaan.loc[:,'POSTED_SPEED_LIMIT'].head(15)

kecelakaan['DEVICE_CONDITION'].isnull().sum()/len(kecelakaan)

"""##**3. Data Modeling (Memanipulasi dan Menyimpulkan Data)**

**a. Handling Outlier**
"""

#Tampilkan Boxplot masing-masing kolom berisi data kuantitatif sebelum handling outlier
#Jenis plot yang digunakan adalah boxplot seaborn
#Melihat adanya pencilan menggunakan Boxplot (Sebelum hapus outlier):
sns.set_theme(style="white")


plt.figure(figsize=(10,5))

for i, col in enumerate(kecelakaan.describe().columns) :
    plt.subplot(2,3, i+1)
    sns.boxplot(x=kecelakaan[col])
    plt.tight_layout()

plt.show()

#Hilangkan Outlier dan tampilkan dataframe hasil menghilangkan outliernya

def index_outliers(dframe):
    
    outliers_index = []
    for col in dframe.describe().columns:
        Q1 = dframe[col].quantile(0.25)
        Q3 = dframe[col].quantile(0.75)
    
        IQR = Q3-Q1
    
        lower_limit = Q1-(1.5*IQR)
        upper_limit = Q3+(1.5*IQR)
    
        outliers = dframe[ (dframe[col]<lower_limit) | (dframe[col]>upper_limit) ].index
        outliers_index.extend(outliers.to_list())
    
    outliers_index = set(outliers_index)  #Convert to set to remove duplicate numbers
    outliers_index = list(outliers_index) #Convert the set back to list
    
    outliers_index.sort()                 #Sort the list
    
    return outliers_index

index_outliers(kecelakaan)

outlier = index_outliers(kecelakaan)
kecelakaan.drop(outlier, inplace=True)

#Data frame setelah menghapus outlier:
kecelakaan

#Tampilkan Boxplot masing-masing kolom berisi data kuantitatif sesudah handling outlier
#Melihat adanya pencilan menggunakan Boxplot (Setelah hapus outlier):
plt.figure(figsize=(10,5))

for i, col in enumerate(kecelakaan.describe().columns) :
    plt.subplot(2,3, i+1)
    sns.boxplot(x=kecelakaan[col])
    plt.tight_layout()
    
plt.show()

"""**b. Select Modeling Technique (Memilih teknik model)**"""

#TRAFFIC_CONTROL_DEVICE dengan posted_speed_limit	 menggunakan barplot
sns.set({'figure.figsize':(8,8)})
kecelakaan2 = kecelakaan[['TRAFFIC_CONTROL_DEVICE','POSTED_SPEED_LIMIT']].groupby('TRAFFIC_CONTROL_DEVICE', as_index=False).sum().melt(id_vars='TRAFFIC_CONTROL_DEVICE')
sns.barplot(x='value', y='TRAFFIC_CONTROL_DEVICE', hue='variable', data=kecelakaan2)

#device_condition dengan injuries_incapacitating/ melumpuhkan  menggunakan barplot
sns.set({'figure.figsize':(8,8)})
kecelakaan2 = kecelakaan[['INJURIES_REPORTED_NOT_EVIDENT','DEVICE_CONDITION']].groupby('DEVICE_CONDITION', as_index=False).sum().melt(id_vars='DEVICE_CONDITION')
sns.barplot(x='value', y='DEVICE_CONDITION', hue='variable', data=kecelakaan2)

#device_condition dengan posted_speed_limit	dan injuries_incapacitating menggunakan barplot
sns.set({'figure.figsize':(13,13)})
kecelakaan2 = kecelakaan[['device_condition', 'posted_speed_limit', 'injuries_incapacitating']].groupby('device_condition', as_index=False).sum().melt(id_vars='device_condition')
sns.barplot(x='value', y='device_condition', hue='variable', data=kecelakaan2)

#Histogram posted_speed_limit dan injuries_incapacitating menggunakan histogram
kecelakaan[["posted_speed_limit","injuries_incapacitating"]].plot(kind="hist",
                                  alpha=0.7,
                                  bins=30,
                                  title="Histogram speed dan injuries",
                                  rot=45,
                                  grid=True,
                                  figsize=(12,8),
                                  fontsize=15,
                                  color=["#FF5733","#5C33FF"]
                                  )
plt.xlabel("Injure")
plt.ylabel("Kecepatan(KiloMeter)")

#Import train test split
from sklearn.model_selection import train_test_split as tts

kecepatan = kecelakaan[['POSTED_SPEED_LIMIT']]
injure = kecelakaan[['INJURIES_INCAPACITATING']]

X_train, X_test, y_train, y_test = tts(kecepatan, injure, random_state=21, test_size = 0.2)

plt.scatter(X_train, y_train)
plt.xlabel('Injure')
plt.ylabel('Kecepatan')
plt.title('Banyaknya orang luka-luka kecelakaan pada kecepatan tertentu')
plt.show()

"""##**4. Model Regresi Variabel Jamak**

**Memprediksi Kecepatan maksimal vs perkiraan terjadinua kecelakaan dan jumlah korban luka-luka**
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
kecelakaan.head(10)

#Cek Statistika Dasar
kecelakaan.describe()

#Seleksi Data dan Tampilkan
cdf = kecelakaan[['POSTED_SPEED_LIMIT', 'BEAT_OF_OCCURRENCE', 'INJURIES_TOTAL']]
cdf.head(10)

#Visualisasi Data yang Telah Diseleksi
viz = cdf[['POSTED_SPEED_LIMIT', 'BEAT_OF_OCCURRENCE', 'INJURIES_TOTAL']]
viz.hist()
plt.show()
#Output

top_state = kecelakaan[["POSTED_SPEED_LIMIT"]]
top_state = kecelakaan[kecelakaan.POSTED_SPEED_LIMIT.isin(top_state)]
#print(top_state)

kecelakaan2 = kecelakaan[['POSTED_SPEED_LIMIT', 'BEAT_OF_OCCURRENCE', 'INJURIES_TOTAL']].groupby(['POSTED_SPEED_LIMIT', 'BEAT_OF_OCCURRENCE'], as_index=False).agg('sum')
sns.lineplot(x='POSTED_SPEED_LIMIT', y='INJURIES_TOTAL', hue='BEAT_OF_OCCURRENCE', data=kecelakaan2 )